/*

ARMiner - Association Rules Miner
Copyright (C) 2000  UMass/Boston - Computer Science Department


This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
USA


The ARMiner Server was written by Dana Cristofor and Laurentiu
Cristofor.

The ARMiner Client was written by Abdelmajid Karatihy, Xiaoyong Kuang,
and Lung-Tsung Li.


The ARMiner package is currently maintained by Laurentiu Cristofor
(laur@cs.umb.edu).

*/

/*
  
   This file is a part of the ARMiner project.
   
   (P)1999-2000 by ARMiner Client Team:

   Abdelmajid Karatihy
   Xiaoyong Kuang
   Lung-Tsung Li

*/

import javax.swing.*;
import java.awt.event.*;
import java.util.*;

/*

  Maintenance log started on November 16th, 2000 by Laurentiu Cristofor

  Nov. 16th, 2000   - made some style changes
                    - changed the text for some menus

*/ 

/**
 * MainFrame.java<P>
 * 
 * The main frame of the application, this is what the user
 * sees after a successful login.
 *
 */

public class MainFrame extends javax.swing.JFrame 
{
  /** Initializes the Form */
  public MainFrame() 
  {
    setSize(640,460);
    setLocation(200,200);
    initComponents ();
    //pack ();

    // disable menus that are not accessible by user
    DBConfig dbconfig = null;
    Vector feedBack = Client.getDBConfig();
    String response = feedBack.elementAt(0).toString();
    if (response.equals("ERROR"))
      {
	System.err.println("Cannot get hold of DBConfig!");
	System.exit(1);
      }
    else
      {
	dbconfig = (DBConfig)feedBack.elementAt(1);
      }
    
    try
      {
	long userPermissions 
	  = dbconfig.getPermissionsForUser(Client.userName);

	// if the user cannot add databases, disable the corresponding menu
	if ((userPermissions & DBConfig.ADD_NEW_DATABASES) == 0)
	  dbMenu.setEnabled(false);

	// if the user cannot add algorithms, disable the corresponding menu
	if ((userPermissions & DBConfig.ADD_NEW_ALGORITHMS) == 0)
	  algMenu.setEnabled(false);

	// if the user cannot add groups, disable the sysadmin menu
	if ((userPermissions & DBConfig.ADD_NEW_GROUPS) == 0)
	  admMenu.setEnabled(false);

	Vector userGroups = dbconfig.listGroupsForUser(Client.userName);

	boolean isAdmin = false;
	for (int i = 0; i < userGroups.size(); i++)
	  if (userGroups.get(i).equals("admin"))
	    {
	      isAdmin = true;
	      break;
	    }

	// if the user is not an admin, disable the "user" menu item
	if (isAdmin == false)
	  userMenuItem.setEnabled(false);
      }
    catch (Exception e)
      {
	System.err.println("An error occurred: " + e);
	System.exit(1);
      }
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () 
  {//GEN-BEGIN:initComponents
    setBackground (java.awt.Color.white);
    setTitle ("ARMiner");
    addWindowListener (new java.awt.event.WindowAdapter () {
        public void windowClosing (java.awt.event.WindowEvent evt) {
          exitForm (evt);
        }
      });

    getContentPane ().setLayout (new java.awt.BorderLayout ());
    arminerMenuBar = new javax.swing.JMenuBar ();

    mineMenu = new javax.swing.JMenu ();
    mineMenu.setText ("Mining");
    mineMenu.setMnemonic(KeyEvent.VK_M);
    mineMenu.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  mineMenuActionPerformed (evt);
	}
      });

    findARMenuItem = new javax.swing.JMenuItem ();
    findARMenuItem.setText ("Find Association Rules");
    findARMenuItem.setMnemonic(KeyEvent.VK_F);
    //findARMenuItem.setActionCommand ("findARMenuItemActionPerformed");
    findARMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jfindARMenuItemActionPerformed (evt);
	}
      });
    mineMenu.add(findARMenuItem);
    
    benchMenuItem = new javax.swing.JMenuItem ();
    benchMenuItem.setText ("Benchmark");
    benchMenuItem.setMnemonic(KeyEvent.VK_B);
    benchMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  benchMenuItemActionPerformed (evt);
	}
      });
    mineMenu.add(benchMenuItem);
    mineMenu.addSeparator();
    
    exitMenuItem = new javax.swing.JMenuItem ();
    exitMenuItem.setText ("Exit");
    exitMenuItem.setMnemonic(KeyEvent.VK_X);
    exitMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  exitMenuItemActionPerformed (evt);
	}
      });
    mineMenu.add(exitMenuItem);
    
    arminerMenuBar.add(mineMenu);
    
    dbMenu = new javax.swing.JMenu ();
    dbMenu.setText ("Databases");
    dbMenu.setMnemonic(KeyEvent.VK_D);
    dbMenu.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jdbMenuActionPerformed (evt);
	}
      });

    addDBMenuItem = new javax.swing.JMenuItem ();
    addDBMenuItem.setText ("Add");
    addDBMenuItem.setMnemonic(KeyEvent.VK_A);
    addDBMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jaddDBMenuItemActionPerformed (evt);
	}
      });

    dbMenu.add(addDBMenuItem);
    
    modDBMenuItem = new javax.swing.JMenuItem ();
    modDBMenuItem.setText ("Modify/Delete");
    modDBMenuItem.setMnemonic(KeyEvent.VK_M);
    modDBMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jmodDBMenuItemActionPerformed (evt);
	}
      });
    dbMenu.add(modDBMenuItem);
    
    dbMenu.addSeparator();
    
    genDBMenuItem = new javax.swing.JMenuItem ();
    genDBMenuItem.setText ("Generate Synthetic Database");
    genDBMenuItem.setMnemonic(KeyEvent.VK_G);
    genDBMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  genDBMenuItemActionPerformed (evt);
	}
      });
    dbMenu.add(genDBMenuItem);
    
    arminerMenuBar.add(dbMenu);
    
    algMenu = new javax.swing.JMenu ();
    algMenu.setText ("Algorithms");
    algMenu.setMnemonic(KeyEvent.VK_A);
    algMenu.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jalgMenuActionPerformed (evt);
	}
      });
    addAlgMenuItem = new javax.swing.JMenuItem ();
    addAlgMenuItem.setText ("Add");
    addAlgMenuItem.setMnemonic(KeyEvent.VK_A);
    addAlgMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jaddAlgMenuItemActionPerformed (evt);
	}
      });

    algMenu.add(addAlgMenuItem);
    
    modAlgMenuItem = new javax.swing.JMenuItem ();
    modAlgMenuItem.setText ("Modify/Delete");
    modAlgMenuItem.setMnemonic(KeyEvent.VK_M);
    modAlgMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jmodAlgMenuItemActionPerformed (evt);
	}
      });
    algMenu.add(modAlgMenuItem);
    
    arminerMenuBar.add(algMenu);
    
    admMenu = new javax.swing.JMenu ();
    admMenu.setText ("System Administration");
    admMenu.setMnemonic(KeyEvent.VK_S);
    admMenu.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jadmMenuActionPerformed (evt);
	}
      });
    groupMenuItem = new javax.swing.JMenuItem ();
    groupMenuItem.setText ("Groups");
    groupMenuItem.setMnemonic(KeyEvent.VK_G);
    groupMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jgroupMenuItemActionPerformed (evt);
	}
      });
    admMenu.add(groupMenuItem);
    
    userMenuItem = new javax.swing.JMenuItem ();
    userMenuItem.setText ("Users");
    userMenuItem.setMnemonic(KeyEvent.VK_U);
    userMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  juserMenuItemActionPerformed (evt);
	}
      });
    admMenu.add(userMenuItem);
    
    arminerMenuBar.add(admMenu);
    
    aboutMenu = new javax.swing.JMenu ();
    aboutMenu.setText ("About");
    aboutMenu.setMnemonic(KeyEvent.VK_B);
    aboutMenu.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  jaboutMenuActionPerformed (evt);
	}
      });
    aboutMenuItem = new javax.swing.JMenuItem ();
    aboutMenuItem.setText ("About ARMiner");
    aboutMenuItem.setMnemonic(KeyEvent.VK_A);
    aboutMenuItem.addActionListener (new java.awt.event.ActionListener () {
	public void actionPerformed (java.awt.event.ActionEvent evt) {
	  aboutMenuItemActionPerformed (evt);
	}
      });
    aboutMenu.add(aboutMenuItem);
    
    arminerMenuBar.add(aboutMenu);
    
    setJMenuBar(arminerMenuBar);
  }//GEN-END:initComponents
  
  private boolean getUserGroupInfo()
  {
    try
      {
	Client.getDBConfig1();
      }
    catch(ClientErrorException e)
      {
	//catch(Exception e){
	JOptionPane.showMessageDialog(this, "MainFrame: Client Error in getting DBConfig:\n " + e.toString() + " \ntransaction aborted!");
	return false;
      }

    try
      {
	users = Client.dbConfig.listUsers();
	groups = Client.dbConfig.listGroups(Client.userName);
	return true;
      }
    catch(DBConfigException e)
      {
	JOptionPane.showMessageDialog(this, "MainFrame: Error in getting users and groups from DBConfig:\n" + e.toString() + " \ntransaction aborted!");
	return false;
      }
  }

  private boolean getAlgGroupInfo()
  {
    try
      {
	Client.getDBConfig1();
      }
    catch(ClientErrorException e)
      {
	JOptionPane.showMessageDialog(this, "MainFrame: Client Error in getting DBConfig:\n " + e.toString() + " \ntransaction aborted!");
	return false;
      }
    
    try
      {
	groups = Client.dbConfig.listGroups(Client.userName);
      }
    catch(DBConfigException e)
      {
	JOptionPane.showMessageDialog(this, "MainFrame: Error in getting groups from DBConfig:\n " + e.toString() + " \ntransaction aborted!");
	return false;
      }

    try
      {
	algorithms = Client.dbConfig.listAlgorithms(Client.userName);
      }
    catch(DBConfigException e)
      {
	JOptionPane.showMessageDialog(this, "MainFrame: Error in getting algorithms from DBConfig:\n " + e.toString() + " \ntransaction aborted!");
	return false;
      }
    return true;
  }

  private void aboutMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_aboutMenuItemActionPerformed
    new AboutDialog(this).show();
  }//GEN-LAST:event_aboutMenuItemActionPerformed

  private void genDBMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_genDBMenuItemActionPerformed
    // Add your handling code here:
    try 
      {
	new DatabaseGenerateDialog(this).show();
      }
    catch(ClientException e)
      {
	System.out.println(e);
      }
  }//GEN-LAST:event_genDBMenuItemActionPerformed

  private void benchMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_benchMenuItemActionPerformed
    // Add your handling code here:
    try
      {
	new BenchmarkDialog(this).show();
      }
    catch(ClientException e)
      {
	System.out.println(e);
      }
  }//GEN-LAST:event_benchMenuItemActionPerformed

  private void exitMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_exitMenuItemActionPerformed
    // Add your handling code here:
    Client.clientExit();
    dispose();
    System.exit(0);
  }//GEN-LAST:event_exitMenuItemActionPerformed

  private void juserMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_juserMenuItemActionPerformed
    // Add your handling code here:
    if (getUserGroupInfo() == false)
      return;
    new UserManagerDialog(this, true, users,groups).show();
  }//GEN-LAST:event_juserMenuItemActionPerformed

  private void jgroupMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jgroupMenuItemActionPerformed
    // Add your handling code here:
    if (getUserGroupInfo() == false)
      return;
    new GroupManagerDialog(this, true, groups, users).show();
  }//GEN-LAST:event_jgroupMenuItemActionPerformed

  private void jmodAlgMenuItemActionPerformed (java.awt.event.ActionEvent evt)
  {//GEN-FIRST:event_jmodAlgMenuItemActionPerformed
    // Add your handling code here:
    if (getAlgGroupInfo() == false)
      return;
    new AlgorithmModifyDialog(this, true, algorithms,groups).show();
  }//GEN-LAST:event_jmodAlgMenuItemActionPerformed

  private void jaddAlgMenuItemActionPerformed (java.awt.event.ActionEvent evt)
  {//GEN-FIRST:event_jaddAlgMenuItemActionPerformed
    // Add your handling code here:
    if (getAlgGroupInfo() == false)
      return;
    new AlgorithmAddDialog(this, true, groups).show();
  }//GEN-LAST:event_jaddAlgMenuItemActionPerformed

  private void jmodDBMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jmodDBMenuItemActionPerformed
    try
      {
	DatabaseModifyDialog mf = new DatabaseModifyDialog(this, true);
	mf.show();
      }
    catch(ClientException e)
      {
	JOptionPane.showMessageDialog(this, e.toString());
      }
  }
  private void jaddDBMenuItemActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jaddDBMenuItemActionPerformed
    try
      {
	DatabaseAddDialog mf = new DatabaseAddDialog(this, true);
	mf.show();
      }
    catch(ClientException e)
      {
	JOptionPane.showMessageDialog(this, e.toString());
      }
  }
  
  private void mineMenuActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_mineMenuActionPerformed
  }

  private void jaboutMenuActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jaboutMenuActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jaboutMenuActionPerformed
  
  private void jadmMenuActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jadmMenuActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jadmMenuActionPerformed
  
  private void jalgMenuActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jalgMenuActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jalgMenuActionPerformed
  
  private void jdbMenuActionPerformed (java.awt.event.ActionEvent evt) 
  {//GEN-FIRST:event_jdbMenuActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jdbMenuActionPerformed
  
  private void jfindARMenuItemActionPerformed (java.awt.event.ActionEvent evt)
  {//GEN-FIRST:event_jfindARMenuItemActionPerformed
    try
      {
	MiningDialog mf = new MiningDialog(this, true);
	mf.show();
      }
    catch(ClientException e)
      {
	JOptionPane.showMessageDialog(this, e.toString());
      }
  }//GEN-LAST:event_jfindARMenuItemActionPerformed
  
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) 
  {//GEN-FIRST:event_exitForm
    Client.clientExit();
    dispose();
    System.exit(0);
  }//GEN-LAST:event_exitForm
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuBar arminerMenuBar;
  private javax.swing.JMenu mineMenu;
  private javax.swing.JMenu dbMenu;
  private javax.swing.JMenu algMenu;
  private javax.swing.JMenu admMenu;
  private javax.swing.JMenu aboutMenu;
  private javax.swing.JMenuItem findARMenuItem;
  private javax.swing.JMenuItem benchMenuItem;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenuItem addDBMenuItem;
  private javax.swing.JMenuItem modDBMenuItem;
  private javax.swing.JMenuItem genDBMenuItem;
  private javax.swing.JMenuItem addAlgMenuItem;
  private javax.swing.JMenuItem modAlgMenuItem;
  private javax.swing.JMenuItem groupMenuItem;
  private javax.swing.JMenuItem userMenuItem;
  private javax.swing.JMenuItem aboutMenuItem;
  private java.util.Vector users;
  private java.util.Vector groups;
  private java.util.Vector algorithms;
  // End of variables declaration//GEN-END:variables
}
